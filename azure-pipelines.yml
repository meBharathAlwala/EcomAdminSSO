trigger:
  - main  # Change to your branch name

variables:
  buildConfiguration: 'production'
  angularProjectName: 'EcomAdmin'

stages:
# -------- BUILD STAGE --------
- stage: Build
  displayName: "Build Angular Application"
  jobs:
    - job: BuildAngular
      pool:
        name: 'Default'  # Self-hosted agent pool

      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: "Install Node.js"

        # Debug: Show working directory and find package.json
        - script: |
            echo "=== Checking working directory ==="
            echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
            dir "$(System.DefaultWorkingDirectory)"
            echo "=== Searching for package.json ==="
            dir /S /B "$(System.DefaultWorkingDirectory)\package.json"
          displayName: "Debug: Show repo contents"

        # Build Angular App from the detected folder
        - script: |
            echo "=== Building Angular App ==="
            for /f "delims=" %%i in ('dir /S /B package.json ^| findstr /I /V "node_modules" ^| findstr /I /C:"EcomAdminSSO"') do (
                echo Found package.json at %%i
                cd /D "%%~dpi"
                npm install -g @angular/cli
                npm install
                ng build --configuration $(buildConfiguration)
            )
          displayName: "Build Angular Project"

        # Publish compiled Angular files
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/**/dist/$(angularProjectName)'
            ArtifactName: 'artifactname'
            publishLocation: 'Container'
          displayName: "Publish Compiled Angular App"

# -------- DEPLOY STAGE --------
- stage: Deploy
  displayName: "Deploy to IIS on Azure VM"
  dependsOn: Build
  jobs:
    - deployment: DeployIIS
      environment: 'Production'
      pool:
        name: 'Default' # Self-hosted agent pool
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: artifactname

              - task: PowerShell@2
                inputs:
                  targetType: 'inline'
                  script: |
                    $source = "$(Pipeline.Workspace)\artifactname"
                    $destination = "C:\MyApps\EcomAdminUI"

                    if (-Not (Test-Path $source)) {
                        Write-Error "Source folder not found: $source"
                        exit 1
                    }

                    # Clear old files
                    if (Test-Path $destination) {
                        Remove-Item $destination\* -Recurse -Force
                    }

                    # Copy new build files
                    Copy-Item "$source\*" $destination -Recurse
                    Write-Host "Deployment completed successfully."
