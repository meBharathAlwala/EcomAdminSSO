trigger:
  - main

variables:
  buildConfiguration: 'production'

stages:
- stage: Build
  displayName: "Build Angular Application"
  jobs:
    - job: BuildAngular
      pool:
        name: 'Default'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: "Install Node.js"

        - script: |
            cd EcomAdminSSO
            npm install -g @angular/cli
            npm install
            ng build --configuration $(buildConfiguration)

            echo "=== Show folder structure after build ==="
            cd ..
            dir /s /b > folderList.txt
            type folderList.txt
          displayName: "Build Angular Project & Show Structure"

        - powershell: |
            $distRoot = "$(System.DefaultWorkingDirectory)\EcomAdminSSO\dist"
            if (-Not (Test-Path $distRoot)) {
                Write-Error "dist folder not found at $distRoot"
                exit 1
            }
            $distFolder = Get-ChildItem $distRoot -Recurse -Directory | Select-Object -First 1
            if (-not $distFolder) { throw "No output folder found inside dist!" }
            Write-Host "Found build folder: $($distFolder.FullName)"
            Write-Host "##vso[task.setvariable variable=distPath]$($distFolder.FullName)"
          displayName: "Detect Build Output Folder"

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(distPath)'
            ArtifactName: 'artifactname'
            publishLocation: 'Container'
          displayName: "Publish Compiled Angular App"

- stage: Deploy
  displayName: "Deploy to IIS on Azure VM"
  dependsOn: Build
  jobs:
    - deployment: DeployIIS
      environment: 'Production'
      pool:
        name: 'Default'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: artifactname

              - task: PowerShell@2
                inputs:
                  targetType: 'inline'
                  script: |
                    $source = "$(Pipeline.Workspace)\artifactname"
                    $destination = "C:\MyApps\EcomAdminUI"
                    if (Test-Path $destination) {
                        Remove-Item $destination\* -Recurse -Force
                    }
                    Copy-Item "$source\*" $destination -Recurse
                    Write-Host "Deployment completed successfully."
